{
  "engine":"bnb-bep2",
  "name":"Binance Chain BEP2 Engine",
  "cache":10000,
  "throttle":1,
  "rate-limit":"1 request per IP per second.",
  "documentation":"https://docs.binance.org/api-reference/dex-api/paths.html",
  "mode":"binance",
  "module":"quartz",
  "addressRegex":"^bnb[A-Za-z0-9]{39}$",
  "factor":8,
  "confirmed":2,
  "fee":"0.000375",
  "listOfHosts":[
    "https://testnet-dex.binance.org/api/v1/",
    "tcp://dataseed1.binance.org:80/api/v1/",
    "wss://testnet-dex.binance.org/api/ws/",
    "wss://dex.binance.org/api/ws/",
    "https://dex.binance.org/api/v1/",
    "https://dex.binance.org:443/api/v1/"],
  "host": {
    "default": "https://dex.binance.org/api/v1",
    "explorer": "https://explorer.binance.org/api/v1"
  },
  "features": {"message":false},
  "import": "transaction-history",
  "apiProvidesFullTx": true,
  "contract": null,
  "quartz":{
    "balance/address" : [
      "curl /account/$address 2 1",
      "fail 'Could not connect to host'",
      "tran '.balances' @success @fail",
      "@fail",
      "fail 'No Result'",
      "@success",
      "find {'symbol':'BNB'} 1 @fail",
      "tran '[0].free'",
      "done"
    ],
    "unspent/address" : [
      "curl /account/$address 2 1",
      "fail 'Could not connect to host'",
      "tran {accountNumber : '.account_number', sequence : '.sequence'}",
      "done"
    ],
    "push/rawTransaction" : [
      "peek rawTransaction",
      "curl /broadcast/?sync=true POST {'content-type': 'text/plain'} 2 1",
      "fail 'Could not connect to host'",
      "tran '[0].hash' 1 2",
      "done",
      "fail"
    ],
    "test": [
      "done {hash:dynamic}"
    ],
    "factor" : [
      "pass '$factor'"
    ],
    "sample" : [
      "done {address:'bnb177qrmvquh5flg6axap943clfm9cq09qcpwxc0m',transaction:'6F52B2DA41DC9E9EA91E16F1028F2C6D89B425A22A8E97CFAAA250375FC11E2D'}"
    ],
    "reformatTx" : [
      "tran .value 2 1",
      "fail 'failed reformatting transaction.'",
      "with newTimestamp [data,$] [tran, '.timeStamp']",
      "with .txAsset [case,lower] [repl,'bnb','$symbol']",
      "tran { id:'.txHash', timestamp: '$newTimestamp', amount:'.value', symbol:'.txAsset', fee:'.txFee', 'fee-symbol':'$symbol', source:'.fromAddr', target:'.toAddr',confirmed:'yes' } @tranSuccess @tranFail",
      "@tranSuccess",
      "done",
      "@tranFail",
      "fail 'Could not parse transaction.'"
    ],
    "getTransaction/transactionId" : [
      "curl ${host.explorer} /tx?txHash=$transactionId 2 1",
      "fail 'Could not connect to host'",
      "tran {value: $}",
      "call reformatTx",
      "done",
      "@fail",
      "fail 'Could not get transaction information!'"
    ],
    "transactionData/transactionId" : [
      "curl /tx/$transactionId?format=json 2 1",
      "fail 'Could not connect to host'",
      "poke txData",
      "tran { txData: $txData } 1 @fail",
      "done",
      "@fail",
      "fail 'Could not get transaction information!'"
    ],
    "message/transactionId" : [
      "call transactionData/$transactionId",
      "tran '.txData.tx.value.memo' 1 @fail",
      "done",
      "@fail",
      "fail 'Could not get message information!'"
    ],
    "subHistory": [
      "tran '.value.txHash' 1 @fail",
      "done",
      "@fail",
      "done 0"
    ],
    "callForHistory/address/rows/page": [
      "curl ${host.explorer} /txs?page=$page&rows=$rows&address=$address 2 1",
      "fail 'Could not connect to host'",
      "tran '.txArray[]' 1 @fail",
      "done",
      "@fail",
      "fail 'Could not retrieve transaction history.'"
    ],
    "historyPageByCountLoop/count/offset/address": [
      "poke result []",
      "poke rowsForCall 100",
      "with pageForCall math floor($offset/$rowsForCall)'",
      "with decimalsOffset [data,'$offset'] [tail, 2]",
      "with countNumber math '$count + $decimalsOffset'",
      "@loopStart",
      "with pageForCall math '+1'",
      "call callForHistory/$address/$rowsForCall/$pageForCall",
      "with result fuse $",
      "loop @loopStart 'countNumber' '>0' '$count' '-$rowsForCall'",
      "peek result",
      "take $decimalsOffset",
      "pick 0 $count",
      "done"
    ],
    "makeTime/count": [
      "peek count",
      "true '>100' 1 @default",
      "math 'floor($/100)*10000'",
      "done",
      "@default",
      "data 15000",
      "done"
    ],
    "getHistory/address/count=12/offset=0" : [
      "call makeTime/$count",
      "time $",
      "true '$offset + $count>10000' @toBig @next",
      "@next",
      "call historyPageByCountLoop/$count/$offset/$address",
      "done",
      "@toBig",
      "fail 'Error range to big for the API to handle, please keep range (offset + count) under 10000'"
    ]
  }
}
