{
  "symbol":"xrp",
  "name":"Ripple",
  "module":"quartz",
  "fee-symbol":"xrp",
  "addressRegex":"^(r[rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz]{27,35}|r[rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz]{27,35}-\\d{6,10}|X[rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz]{46})$",
  "fee":"0.00001",
  "fee-factor":6,
  "activationBalance":20,
  "cron":300,
  "confirmed":1,
  "mode":"xrp",
  "contract":"",
  "factor":6,
  "host": "wss://s2.ripple.com:443",
  "import": "transaction-history",
  "apiProvidesFullTx": true,
  "cache":15000,
  "throttle":5,
  "notes" : {
    "send" : "Ripple destination tags can be added using a dash (-) separator: [address]-[destinationTag]. Addresses starting with X already have their destination tag embedded."
  },
  "api-rate-info":{
    "url": "https://www.xrpchat.com/topic/20759-ripple-data-api-v2-rate-limit/",
    "rate-limit":"rumoured but no confirmation found"
  },
  "features": {"message":true},
  "genesisBlockTime":946684800 ,
  "quartz" : {
    "init" : [
      "rand 10000",
      "data {'id': $,'command': 'server_info'}",
      "curl POST 2 1",
      "fail 'Could not connect to host'",
      "tran '.status' @status @fail",
      "@status",
      "flow 'success' @end @fail",
      "@fail",
      "fail 'No result!'",
      "@end",
      "rand 10000",
      "data {'id': $,'command': 'server_info'}",
      "curl POST 2 1",
      "fail 'Could not connect to host'",
      "done"
    ],
    "balance" : [
      "data '$symbol'",
      "flow 'xrp' @balance @tokenBalance",
      "@balance",
      "rand 10000",
      "data {'id': $,'command': 'account_info','account': '$1','strict': true,'ledger_index': 'current','queue': true}",
      "curl POST 2 1",
      "fail 'Could not connect to host'",
      "tran '.result.account_data.Balance' @end @fail",
      "@fail",
      "tran '.error'",
      "flow 'actNotFound' @actNotFound @endFail",
      "@actNotFound",
      "data '0'",
      "form",
      "done",
      "@endFail",
      "fail 'No result!'",
      "@end",
      "atom",
      "done",
      "@tokenBalance",
      "peek symbol",
      "case upper",
      "take 4",
      "poke tokenSymbol",
      "rand 10000",
      "data {'id': $,'command': 'account_lines','account': '$1', 'ledger_index': 'current'}",
      "curl POST 2 1",
      "fail 'Could not connect to host'",
      "tran '.status' 1 @fail",
      "flow 'success' 1 @fail",
      "rand 10000",
      "data {'id': $,'command': 'account_lines','account': '$1', 'ledger_index': 'current'}",
      "curl POST 2 1",
      "fail 'Could not connect to host'",
      "tran '.result.lines' @lines @fail",
      "@lines",
      "find {'currency':'$tokenSymbol'} @currency 1",
      "data 0",
      "jump @done",
      "@currency",
      "each balance_currency",
      "math",
      "atom",
      "@done"
    ],
    "balance_currency" : [
      "tran '.value.balance' 1 @fail",
      "jump @end",
      "@fail",
      "fail 'No result'",
      "@end",
      "done"
    ],
    "cron" : [
      "data $symbol",
      "flow 'xrp' 2 1",
      "done",
      "rand 10000",
      "data {'id': $,'command': 'server_info'}",
      "curl POST 2 1",
      "fail 'Could not connect to host'",
      "tran '.status' @status @fail",
      "@status",
      "flow 'success' @getFee @fail",
      "@fail",
      "fail 'No result!'",
      "@getFee",
      "rand 10000",
      "data {'id': $,'command': 'server_info'}",
      "curl POST 2 1",
      "fail 'Could not connect to host'",
      "tran '.result.info.load_factor' @fee @fail",
      "@fee",
      "poke 'local::load_factor'",
      "math '$fee * $local::load_factor'",
      "poke 'local::fee'",
      "done"
    ],
    "fee" : [
      "peek local::fee",
      "flow 'undefined' @defaulFee @localFee",
      "@defaulFee",
      "done $fee",
      "@localFee",
      "done"
    ],
    "push" : [
      "data '$1'",
      "jpar",
      "curl POST 2 1",
      "fail 'Could not connect to host'",
      "poke 'res'",
      "tran '.error' @fail @success",
      "@fail",
      "fail '$res'",
      "@success",
      "tran '.result.engine_result' 1 @fail",
      "flow 'tesSUCCESS' 1 @engineFail",
      "peek 'res'",
      "tran '.result.tx_json.hash' 1 @fail",
      "done",
      "@engineFail",
      "peek 'res'",
      "tran '.result.engine_result_message' 1 @fail",
      "fail 'Transaction failed with the following error: \"$\"'",
      "tran '.result.tx_json.hash' @success2 @fail",
      "@success2",
      "done"
    ],
    "getTransaction" : [
      "rand 10000",
      "data {'id': $,'command': 'tx','transaction': '$1','binary': false}",
      "curl POST 2 1",
      "fail 'Could not connect to host'",
      "tran {id:'=.result.hash|unknown',fee:'=.result.Fee|unknown',timestamp:'=.result.date+$genesisBlockTime|unknown',symbol:'xrp',amount:'.result.Amount',source:'=.result.Account|unknown',target:'=.result.Destination|unknown',fee-symbol: $fee-symbol, confirmed:.result.validated} @success @fail",
      "@fail",
      "fail 'error'",
      "@success",
      "with .fee math '/10^$factor'",
      "with .amount math '/10^$factor'"
    ],
    "unspent" : [
      "call balance/$1",
      "true >=$activationBalance 3 1",
      "with symbolUppercase [data,$symbol] [case,upper]",
      "fail 'Not enough activation balance on account! Minimum required is ${activationBalance} ${symbolUppercase} to send transactions! Currently only $ ${symbolUppercase} available.'",
      "rand 10000",
      "data {'id': $,'command': 'account_info','account': '$1','strict': true,'ledger_index': 'current','queue': true}",
      "curl POST 2 1",
      "fail 'Could not connect to host'",
      "tran '.result.account_data.Sequence' @next @fail",
      "@next",
      "poke 'local::sequence'",
      "rand 10000",
      "data {'id': $,'method': 'server_state'}",
      "curl POST 2 1",
      "fail 'Could not connect to host'",
      "tran '.result.state.validated_ledger.seq' @next2 @fail",
      "@next2",
      "math '+4'",
      "poke 'local::ledgerSeq'",
      "peek 'local::sequence'",
      "tran {lastLedgerSequencePlus: '$local::ledgerSeq', sequence: '$local::sequence'} 1 @fail",
      "done",
      "@fail",
      "tran '.error'",
      "flow 'actNotFound' @actNotFound @endFail",
      "@actNotFound",
      "data {lastLedgerSequencePlus: '0', sequence: '0'}",
      "done",
      "@endFail",
      "fail 'No result!'"
    ],
    "sample" : [
      "done {address:'rbwE6wsxzYat1YyGGxzAwq6wBSF5MdoAg',transaction:'699C005DEA8638B6FFEDB6039A82EB4190E0BAFAAA6E14307042FBA089E93EFE'}"
    ],
    "subhistory" : [
      "tran '.value' 1 @fail",
      "done",
      "@fail",
      "done 0"
    ],
    "reformatTx": [
      "tran .value 2 1",
      "fail 'failed reformatting transaction.'",
      "with reformatTimestamp [data,'${.tx.date}'] [math, '+${genesisBlockTime}']",
      "tran {id:'=.tx.hash|unknown', fee:'=.tx.Fee|unknown', timestamp:'$reformatTimestamp', symbol:'$symbol', amount:'=.tx.Amount.value|.tx.Amount|unknown', source:'=.tx.Account|unknown', target:'=.tx.Destination|unknown', fee-symbol: ${fee-symbol}, confirmed:'=.tx.validated|unknown'} @tranSuccess @tranFail",
      "@tranSuccess",
      "with .fee math '/10^$factor'",
      "with .amount math '/10^$factor'",
      "done",
      "@tranFail",
      "fail 'Could not parse history'"
    ],
    "getHistory" : [
      "poke count $2 12",
      "poke offset $3 0",
      "with limit [math,'$count+$offset']",
      "rand 10000",
      "data {'id': $, 'command': 'account_tx', 'account': '$1', 'ledger_index_min': -1, 'ledger_index_max': -1, 'binary': false, 'forward': false, 'limit':'$limit'}",
      "curl POST 2 1",
      "fail 'Could not connect to host'",
      "tran '.result.transactions[]' 1 @fail",
      "sort .tx.date desc",
      "take '$offset'",
      "done",
      "@fail",
      "fail 'History failed to load'"
    ],
    "test" :[
      "done {hash:'1F0A44CB', unspent:{lastLedgerSequencePlus:46084264,sequence:759}}"
    ]
  }
}
