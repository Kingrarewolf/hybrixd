{
  "engine":"testquartz",
  "name":"Quartz Testing Engine",
  "module":"quartz",
  "cache":1000,
  "throttle":10,
  "OK":"OK",
  "NOT_OK":"NOT_OK",
  "quartz":{
    "bank1":[
      "data {symbol:dummy}",
      "bank getBalance {username:DUMMYDUMMYDUMMY0,password:DUMMYDUMMYDUMMY0} 1 2",
      "done $OK",
      "fail"
    ],
    "case" : [
      "data abc123",
      "case upper",
      "flow ABC123 1 2",
      "done $OK",
      "fail"
    ],
    "code" : [
      "data woot",
      "code utf-8 bin",
      "flow '1110111011011110110111101110100' 1 2",
      "done $OK",
      "fail"
    ],
    "date" : [
      "date now",
      "data '$'",
      "head 2",
      "flow '16' 1 2",
      "done $OK",
      "fail"
    ],
    "drop1" : [
      "data 'abc'",
      "drop 1",
      "flow 'bc' 1 2",
      "done $OK",
      "fail"
    ],
    "drop2" : [
      "data 'abc'",
      "drop -1",
      "flow 'ab' 1 2",
      "done $OK",
      "fail"
    ],
    "drop3" : [
      "data 'abc'",
      "drop 1 1",
      "flow 'b' 1 2",
      "done $OK",
      "fail"
    ],
    "drop4" : [
      "data {a:1,b:2}",
      "drop b",
      "jstr",
      "flow '{\"a\":1}' 1 2",
      "done $OK",
      "fail"
    ],
    "drop5" : [
      "data abcde",
      "drop [1,3]",
      "flow ace 1 2",
      "done $OK",
      "fail"
    ],
    "drop6" : [
      "data {a:1,b:2,c:3}",
      "drop [b,c]",
      "jstr",
      "flow '{\"a\":1}' 1 2",
      "done $OK",
      "fail"
    ],
    "encr":[
      "with keys keys",
      "data message",
      "encr $keys",
      "decr $keys",
      "flow message 1 2",
      "done $OK",
      "fail"
    ],
    "excl1" : [
      "data gloves",
      "excl g",
      "flow 'loves' 1 2",
      "done $OK",
      "fail"
    ],
    "excl2" : [
      "data [g,l,o,v,e,s]",
      "excl g",
      "jstr",
      "flow '[\"l\",\"o\",\"v\",\"e\",\"s\"]' 1 2",
      "done $OK",
      "fail"
    ],
    "excl3" : [
      "data gloves",
      "excl [g,s] true",
      "flow 'love' 1 2",
      "done $OK",
      "fail"
    ],
    "excl4" : [
      "data [g,l,o,v,e,s]",
      "excl [g,s] true",
      "jstr",
      "flow '[\"l\",\"o\",\"v\",\"e\"]' 1 2",
      "done $OK",
      "fail"
    ],
    "filt1" : [
      "data gloves",
      "filt g",
      "flow 'g' 1 2",
      "done $OK",
      "fail"
    ],
    "filt2" : [
      "data [g,l,o,v,e,s]",
      "filt g",
      "jstr",
      "flow '[\"g\"]' 1 2",
      "done $OK",
      "fail"
    ],
    "filt3" : [
      "data gloves",
      "filt [g,s] true",
      "flow 'gs' 1 2",
      "done $OK",
      "fail"
    ],
    "filt4" : [
      "data [g,l,o,v,e,s]",
      "filt [g,s] true",
      "jstr",
      "flow '[\"g\",\"s\"]' 1 2",
      "done $OK",
      "fail"
    ],
    "find1" : [
      "data [{id:1,test:2},{id:3,test:4},{id:5,test:6}]",
      "find {id:5}",
      "data ${[0].test}",
      "flow 6 1 2",
      "done $OK",
      "fail"
    ],
    "find2" : [
      "data 'hello world'",
      "find hello 1 2",
      "done $OK",
      "fail"
    ],
    "find3" : [
      "data 'hello world'",
      "find foobar 2 1",
      "done $OK",
      "fail"
    ],
    "flow1" : [
      "data appel",
      "flow appel 1 2",
      "done $OK",
      "fail"
    ],
    "flow2" : [
      "data appel",
      "flow {appel:1} 2",
      "done $OK",
      "fail"
    ],
    "flow3" : [
      "poke fruit appel",
      "flow fruit {appel:1} 2",
      "done $OK",
      "fail"
    ],
    "flow4" : [
      "# $1 has null so flow should fail",
      "flow 1 {fruit:2} 1",
      "done $OK",
      "fail"
    ],
    "form1" :[
      "data 12.3",
      "form 8",
      "flow '12.30000000' 1 2",
      "done $OK",
      "fail"
    ],
    "form2" :[
      "data 12.3",
      "form btc",
      "flow '12.30000000' 1 2",
      "done $OK",
      "fail"
    ],
    "fuse1" : [
      "data appel!",
      "fuse taart 5",
      "flow 'appeltaart!' 1 2",
      "done $OK",
      "fail"
    ],
    "fuse2" : [
      "data [1,2,3]",
      "fuse [4,5,6]",
      "pick 4",
      "flow '5' 1 2",
      "done $OK",
      "fail"
    ],
    "have1" : [
      "data {foo:bar}",
      "have .foo 1 2",
      "done $OK",
      "fail"
    ],
    "have2" : [
      "data {apple:pie}",
      "have .foo 1 2",
      "fail",
      "done $OK"
    ],
    "have3" : [
      "data 1",
      "poke myVar",
      "have myVar 1 2",
      "done $OK",
      "fail"
    ],
    "have4" : [
      "have nonExistingVariable 1 2",
      "fail",
      "done $OK"
    ],
    "head" : [
      "data appeltaart",
      "head 5",
      "flow 'appel' 1 2",
      "done $OK",
      "fail"
    ],

    "indx" : [
      "data 'This is a needle and not a needle...'",
      "indx 'needle'",
      "flow 10 1 2",
      "done $OK",
      "fail"
    ],
    "indx2" : [
      "data 'This is a needle and not a needle...'",
      "indx 'needle' true",
      "flow 27 1 2",
      "done $OK",
      "fail"
    ],
    "indx3" : [
      "data ['This is a needle and not a needle...',0,null,'needle','nein']",
      "indx 'needle'",
      "flow 3 1 2",
      "done $OK",
      "fail"
    ],
    "indx4" : [
      "data ['This is a needle and not a needle...',0,null,'needle','nein']",
      "indx 'needle' true",
      "flow 3 1 2",
      "done $OK",
      "fail"
    ],
    "indx5" : [
      "data ['This is a needle and not a needle...',0,null,'needle','nein']",
      "indx 'needle' false true",
      "flow [10,-1,-1,0,-1] 1 2",
      "done $OK",
      "fail"
    ],
    "indx6" : [
      "data ['This is a needle and not a needle...',0,null,'needle','nein']",
      "indx 'needle' true true",
      "flow [27,-1,-1,0,-1] 1 2",
      "done $OK",
      "fail"
    ],

    "jpar" : [
      "data '{\"key\":\"value\"}'",
      "jpar 1 4",
      "data ${.key}",
      "flow value 1 2",
      "done $OK",
      "fail"
    ],
    "jpar2" : [
      "data 'broken JSON key:value}'",
      "jpar 2 1",
      "done $OK",
      "fail"
    ],

    "jstr" : [
      "data {key:value,array:[1,2,3]}",
      "jstr",
      "flow '{\"key\":\"value\",\"array\":[1,2,3]}' 1 2",
      "done $OK",
      "fail"
    ],
    "many" : [
      "data abcdefaba",
      "many 2",
      "flow 'aaa' 1 2",
      "done $OK",
      "fail"
    ],

    "pick" : [
      "data abcdef",
      "pick 2",
      "flow c 1 2",
      "done $OK",
      "fail"
    ],
    "pick2" : [
      "data abcdef",
      "pick -1",
      "flow f 1 2",
      "done $OK",
      "fail"
    ],
    "pick3" : [
      "data abcdef",
      "pick 1 3",
      "flow bc 1 2",
      "done $OK",
      "fail"
    ],
    "pick4" : [
      "data abcdef",
      "pick [1,3]",
      "flow bd 1 2",
      "done $OK",
      "fail"
    ],
    "pick5" : [
      "data [a,b,c,d,e,f]",
      "pick 2",
      "flow c 1 2",
      "done $OK",
      "fail"
    ],
    "pick6" : [
      "data [a,b,c,d,e,f]",
      "pick -1",
      "flow f 1 2",
      "done $OK",
      "fail"
    ],
    "pick7" : [
      "data [a,b,c,d,e,f]",
      "pick [1,3]",
      "flow '[\"b\",\"d\"]' 1 2",
      "done $OK",
      "fail"
    ],
    "pick8" : [
      "data {a:1,b:2,c:3}",
      "pick a",
      "flow 1 1 2",
      "done $OK",
      "fail"
    ],
    "pick9" : [
      "data {a:1,b:2,c:3}",
      "pick [a,c]",
      "flow '[1,3]' 1 2",
      "done $OK",
      "fail"
    ],
    "push1" : [
      "data abc",
      "push def",
      "flow abcdef 1 2",
      "done $OK",
      "fail"
    ],
    "push2" : [
      "data abc",
      "push X 1",
      "flow aXbc 1 2",
      "done $OK",
      "fail"
    ],
    "push3" : [
      "data [a,b,c]",
      "push X",
      "join",
      "flow abcX 1 2",
      "done $OK",
      "fail"
    ],
    "push4" : [
      "data [a,b,c]",
      "push X 1",
      "join",
      "flow aXbc 1 2",
      "done $OK",
      "fail"
    ],
    "push5" : [
      "data abc",
      "push X [1,3]",
      "flow aXbcX 1 2",
      "done $OK",
      "fail"
    ],
    "push6" : [
      "data [a,b,c]",
      "push X [1,3]",
      "join",
      "flow aXbcX 1 2",
      "done $OK",
      "fail"
    ],
    "repl" : [
      "data 'Many apples for you.'",
      "repl [apples,you] [pears,me]",
      "flow 'Many pears for me.' 1 2",
      "done $OK",
      "fail"
    ],
    "ship1" :[
      "data 1",
      "ship 1 2 2 2",
      "done $OK",
      "fail"
    ],
    "ship2" :[
      "data 0",
      "ship 2 1 2 2",
      "done $OK",
      "fail"
    ],
    "ship3" :[
      "data -1",
      "ship 2 2 1 2",
      "done $OK",
      "fail"
    ],
    "ship4" :[
      "data a",
      "ship 2 2 2 1",
      "done $OK",
      "fail"
    ],
    "ship5" :[
      "data 1",
      "poke tmp",
      "ship tmp 1 2 2 2",
      "done $OK",
      "fail"
    ],
    "sign":[
      "keys",
      "poke {secretKey:secretKey,publicKey:publicKey}",
      "data message",
      "sign $secretKey",
      "sign $publicKey",
      "done $OK"
    ],
    "size" : [
      "data '1234'",
      "size",
      "flow 4 1 2",
      "done $OK",
      "fail"
    ],
    "sort" : [
      "data '1234'",
      "sort",
      "flow '1234' 1 2",
      "done $OK",
      "fail"
    ],
    "sort2" : [
      "data '1234'",
      "sort desc",
      "flow '4321' 1 2",
      "done $OK",
      "fail"
    ],
    "sort3" : [
      "data [1,2,3,4]",
      "sort",
      "flow [1,2,3,4] 1 2",
      "done $OK",
      "fail"
    ],
    "sort4" : [
      "data [1,2,3,4]",
      "sort",
      "flow [4,3,2,1] 1 2",
      "done $OK",
      "fail"
    ],
    "sort5" : [
      "data [m,z,a,c]",
      "sort",
      "flow [a,c,m,z] 1 2",
      "done $OK",
      "fail"
    ],
    "sort6" : [
      "data [m,z,a,c]",
      "sort desc",
      "flow [z,m,c,a] 1 2",
      "done $OK",
      "fail"
    ],
    "sort7" : [
      "data {a:3,q:1,c:7,m:2}",
      "sort ",
      "flow [{'a': 3},{'c': 7},{'m': 2},{'q': 1}] 1 2",
      "done $OK",
      "fail"
    ],
    "sort8" : [
      "data {a:3,q:1,c:7,m:2}",
      "sort desc",
      "flow [{'q': 1},{'m': 2},{'c': 7},{'a': 3}] 1 2",
      "done $OK",
      "fail"
    ],
    "sort9" : [
      "data {a:3,q:1,c:7,m:2}",
      "sort asc val",
      "flow [{'q': 1},{'m': 2},{'a': 3},{'c': 7}] 1 2",
      "done $OK",
      "fail"
    ],
    "sort10" : [
      "data {a:3,q:1,c:7,m:2}",
      "sort desc",
      "flow [{'c': 7},{'a': 3},{'m': 2},{'q': 1}] 1 2",
      "done $OK",
      "fail"
    ],
    "sort11" : [
      "data {a:3,q:1,c:7,m:2}",
      "sort asc desc",
      "flow [{'c': 7},{'a': 3},{'m': 2},{'q': 1}] 1 2",
      "done $OK",
      "fail"
    ],
    "sort12" : [
      "data [[1,3],[1,1],[2,2]]",
      "sort .1 asc",
      "flow [[1,1],[2,2],[1,3]] 1 2",
      "done $OK",
      "fail"
    ],
    "sort13" : [
      "data [{a:3},{a:1},{a:7},{a:2}]",
      "sort asc .a",
      "flow [{'a': 1},{'a': 2},{'a': 3},{'a': 7}] 1 2",
      "done $OK",
      "fail"
    ],
    "sort14" : [
      "data [{a:3},{a:1},{a:7},{a:2}]",
      "sort '.a'",
      "flow [{'a': 1},{'a': 2},{'a': 3},{'a': 7}] 1 2",
      "done $OK",
      "fail"
    ],
    "sort15" : [
      "data null",
      "hook @hook",
      "sort",
      "@hook",
      "done $OK"
    ],
    "sort16" : [
      "data undefined",
      "hook @hook",
      "sort",
      "@hook",
      "done $OK"
    ],
    "sort17" : [
      "data false",
      "hook @hook",
      "sort",
      "@hook",
      "done $OK"
    ],
    "sort18" : [
      "data []",
      "sort asc",
      "flow [] 1 2",
      "done $OK",
      "fail"
    ],
    "sort19" : [
      "data [{a:3},{a:1},{a:7},{a:2}]",
      "sort desc .a",
      "flow [{'a': 7},{'a': 3},{'a': 2},{'a': 1}] 1 2",
      "done $OK",
      "fail"
    ],
    "math1" : [
      "math 1+1",
      "flow 2 1 2",
      "done $OK",
      "fail"
    ],

    "math2" : [
      "data [1,2,3]",
      "math +",
      "flow 6 1 2",
      "done $OK",
      "fail"
    ],

    "math3" : [
      "data 1",
      "math +1",
      "flow 2 1 2",
      "done $OK",
      "fail"
    ],
    "math4" : [
      "data [1,2]",
      "math +",
      "flow 3 1 2",
      "done $OK",
      "fail"
    ],
    "math5" : [
      "data 1.2",
      "math floor",
      "flow 1 1 2",
      "done $OK",
      "fail"
    ],
    "math6" : [
      "math floor(1.2)",
      "flow 1 1 2",
      "done $OK",
      "fail"
    ],
    "math7" : [
      "math 2 +2 *2",
      "flow 8 1 2",
      "done $OK",
      "fail"
    ],
    "burn" : [
      "save testBurn",
      "burn testBurn",
      "seek testBurn 2 1",
      "done $OK",
      "fail"
    ],
    "save" : [
      "burn testSave",
      "save testSave 123",
      "seek testSave 1 2",
      "done $OK",
      "fail"
    ],
    "load" : [
      "data 123",
      "save testLoad",
      "load testLoad 1 3",
      "flow '123' 1 2",
      "done $OK",
      "fail"
    ],
    "list" : [
      "burn testList",
      "save testList",
      "list testList",
      "size",
      "ship 1 2 2 2",
      "done $OK",
      "fail"
    ],
    "work" : [
      "burn testWork",
      "save testWork 123",
      "poke challenge ${.challenge}",
      "rout /e/storage/meta/testWork",
      "tran .pow",
      "rout '/e/storage/work/testWork/$'",
      "rout /e/storage/meta/testWork",
      "tran .expire",
      "flow null 2 1",
      "done $OK",
      "fail"
    ],
    "rout0" : [
      "rout /a/dummy/factor 1 3",
      "flow {8:1} 2",
      "done '$OK'",
      "fail"
    ],

    "rout1" : [
      "rout /a/non_existing_asset/factor 2 1",
      "done '$OK'",
      "fail $NOT_OK:$0:$"
    ],

    "rout2" : [
      "rout /s/web-wallet/non_existing_file 2 1",
      "done '$OK'",
      "fail"
    ],

    "rout3" : [
      "#fonts is a directory should fail but not crash",
      "rout /s/web-wallet/fonts 2 1",
      "done '$OK'",
      "fail"
    ],

    "fail" : [
      "hook @hook",
      "fail",
      "@hook",
      "done '$OK'"
    ],
    "data" : [
      "data '$OK'",
      "done"
    ],
    "peek1" : [
      "data a",
      "poke b",
      "data x",
      "peek b",
      "flow a 1 2",
      "done '$OK'",
      "fail"
    ],
    "peek2" : [
      "data a",
      "poke local::b",
      "data x",
      "peek local::b",
      "flow a 1 2",
      "done '$OK'",
      "fail"
    ],
    "peek3" : [
      "peek OK",
      "flow OK 1 2",
      "done '$OK'",
      "fail"
    ],
    "peek4" : [
      "hook @fail",
      "peek nonExistingVariable",
      "fail",
      "@fail",
      "done '$OK'"
    ],
    "peek5" : [
      "data '$nonExistingVariable'",
      "flow 'undefined' 1 2",
      "done '$OK'",
      "fail"
    ],
    "peek6" : [
      "peek nonExistingVariable fallback",
      "flow fallback 1 2",
      "done '$OK'",
      "fail"
    ],
    "peek7" : [
      "data {a:1}",
      "peek [a]",
      "flow 1 1 2",
      "done '$OK'",
      "fail"
    ],
    "peek8" : [
      "data {a:1}",
      "peek .a",
      "flow 1 1 2",
      "done '$OK'",
      "fail"
    ],
    "peek9" : [
      "data {'a.b':1}",
      "peek [a.b]",
      "flow 1 1 2",
      "done '$OK'",
      "fail"
    ],
    "peek10" : [
      "data {'a.b':1}",
      "data ${.[a.b]}",
      "flow 1 1 2",
      "done '$OK'",
      "fail"
    ],
    "peek11" : [
      "data {a:{'a.b':1}}",
      "peek .a[a.b]",
      "flow 1 1 2",
      "done '$OK'",
      "fail"
    ],
    "regx1" : [
      "data applepie",
      "regx ^apple 1 2",
      "done '$OK'",
      "fail"
    ],
    "regx2" : [
      "data applepie",
      "poke tmp",
      "regx tmp ^apple 1 2",
      "done '$OK'",
      "fail"
    ],
    "shuf1" : [
      "data [1,2,3]",
      "shuf 1",
      "join",
      "flow '312' 1 2",
      "done '$OK'",
      "fail"
    ],
    "shuf2" : [
      "data [1,2,3]",
      "shuf -1",
      "join",
      "flow '231' 1 2",
      "done '$OK'",
      "fail"
    ],
    "shuf3" : [
      "data '123'",
      "shuf 1",
      "flow '312' 1 2",
      "done '$OK'",
      "fail"
    ],
    "shuf4" : [
      "data '123'",
      "shuf -1",
      "flow '231' 1 2",
      "done '$OK'",
      "fail"
    ],
    "spread1" : [
      "data [1,2,...[3,4],5]",
      "join",
      "flow '12345' 1 2",
      "done '$OK'",
      "fail"
    ],
    "spread3" : [
      "data {a:1,...[1,2],b:2}",
      "jstr",
      "flow '{\"0\":1,\"1\":2,\"a\":1,\"b\":2}' 1 2",
      "done '$OK'",
      "fail"
    ],
    "take1" : [
      "data abcdefg",
      "take 2",
      "flow cdefg 1 2",
      "done '$OK'",
      "fail"
    ],
    "take2" : [
      "data abcdefg",
      "take 2 3",
      "flow cde 1 2",
      "done '$OK'",
      "fail"
    ],
    "take3" : [
      "data [a,b,c,d,e,f,g]",
      "take 2",
      "join ,",
      "flow c,d,e,f,g 1 2",
      "done '$OK'",
      "fail"
    ],
    "take4" : [
      "data [a,b,c,d,e,f,g]",
      "take 2 3",
      "join ,",
      "flow c,d,e 1 2",
      "done '$OK'",
      "fail"
    ],
    "test1" : [
      "data true",
      "test 1 2",
      "done '$OK'",
      "fail"
    ],
    "test2" : [
      "data false",
      "test 2 1",
      "done '$OK'",
      "fail"
    ],
    "test3" : [
      "data ''",
      "test 2 1",
      "done '$OK'",
      "fail"
    ],
    "test4" : [
      "data 0",
      "test 2 1",
      "done '$OK'",
      "fail"
    ],
    "test5" : [
      "data true",
      "poke a",
      "test a 1 2",
      "done '$OK'",
      "fail"
    ],
    "test6" : [
      "data true",
      "poke a",
      "data true",
      "poke b",
      "test [a,b] 1 2",
      "done '$OK'",
      "fail"
    ],
    "test7" : [
      "data true",
      "poke a",
      "data false",
      "poke b",
      "test [a,b] 2 1",
      "done '$OK'",
      "fail"
    ],
    "tran1" : [
      "data [{a:x},{a:y}]",
      "tran [].a 1 4",
      "jstr",
      "flow '[\"x\",\"y\"]' 1 2",
      "done '$OK'",
      "fail"
    ],
    "tran2" : [
      "data [{a:x},{a:y}]",
      "tran []{b:.a} 1 4",
      "jstr",
      "flow '[{\"b\":\"x\"},{\"b\":\"y\"}]' 1 2",
      "done '$OK'",
      "fail"
    ],
    "tran3" : [
      "data [{a:1,b:2},{a:3,b:4}]",
      "tran [][.a,.b] 1 4",
      "jstr",
      "flow '[[1,2],[3,4]]' 1 2",
      "done '$OK'",
      "fail"
    ],
    "tran4" : [
      "data {a:x}",
      "tran .a 1 4",
      "flow x 1 2",
      "done '$OK'",
      "fail"
    ],
    "tran5" : [
      "data {a:x}",
      "tran '[a]' 1 4",
      "flow x 1 2",
      "done '$OK'",
      "fail"
    ],
    "tran6" : [
      "data {a:x}",
      "tran [a] 1 4",
      "jstr",
      "flow [a] 1 2",
      "done '$OK'",
      "fail"
    ],
    "tran7" : [
      "data [{a:x},{a:y}]",
      "tran '[].a' 1 4",
      "jstr",
      "flow '[\"x\",\"y\"]' 1 2",
      "done '$OK'",
      "fail"
    ],
    "tran8" : [
      "data {a:{x:1},b:{x:2}}",
      "tran {}.x 1 4",
      "jstr",
      "flow '{\"a\":1,\"b\":2}' 1 2",
      "done '$OK'",
      "fail"
    ],
    "tran9" : [
      "data {a:1,b:2}",
      "tran {*:} 1 4",
      "join",
      "flow 'ab' 1 2",
      "done '$OK'",
      "fail"
    ],
    "tran10" : [
      "data {a:1,b:2}",
      "tran {:*} 1 4",
      "join",
      "flow '12' 1 2",
      "done '$OK'",
      "fail"
    ],

    "true1":[
      "data 2",
      "true '<1' 1 2",
      "fail",
      "done '$OK'"
    ],
    "true2":[
      "true '2>1' 2 1",
      "fail",
      "done '$OK'"
    ],
    "type1":[
      "data 1",
      "type",
      "flow number 1 2",
      "done '$OK'",
      "fail"
    ],
    "type2":[
      "data [1,2]",
      "type",
      "flow array 1 2",
      "done '$OK'",
      "fail"
    ],
    "type3":[
      "data [1,2]",
      "type array 1 2",
      "done '$OK'",
      "fail"
    ],
    "type4":[
      "data [1,2]",
      "type {array:1} 2",
      "done '$OK'",
      "fail"
    ],
    "type5":[
      "data [1,2]",
      "poke tmp",
      "type array 1 2",
      "done '$OK'",
      "fail"
    ],
    "type6":[
      "data [1,2]",
      "poke tmp",
      "type tmp {array:1} 2",
      "done '$OK'",
      "fail"
    ],
    "with1":[
      "data '$NOT_OK'",
      "poke with_test",
      "with with_test done $OK",
      "peek with_test"
    ],

    "with2":[
      "data '$NOT_OK'",
      "poke with_test",
      "with with_test [data,3] [true,'==3',2,1] [fail] [done,$OK]",
      "peek with_test"
    ],
    "with3":[
      "data '$NOT_OK'",
      "poke test $OK",
      "poke with_test",
      "with with_test peek test",
      "peek with_test"
    ],
    "with4":[
      "poke [a,b] [x,y]",
      "with [a,b] case upper",
      "data '$a$b'",
      "flow XY 1 2",
      "done $OK",
      "fail"
    ],
    "with5":[
      "with {a:x,b:y} case upper",
      "data '$a$b'",
      "flow XY 1 2",
      "done $OK",
      "fail"
    ],
    "with6":[
      "data [{a:1},{a:2}]",
      "with [].a math +1",
      "jstr",
      "flow '[{\"a\":\"2\"},{\"a\":\"3\"}]' 1 2",
      "done $OK",
      "fail"
    ],
    "with7":[
      "data {x:{a:1},y:{a:2}}",
      "with {}.a math +1",
      "jstr",
      "flow '{\"x\":{\"a\":\"2\"},\"y\":{\"a\":\"3\"}}' 1 2",
      "done $OK",
      "fail"
    ],
    "test" : [
      "qrtz",
      "excl [test,subtest] true",
      "each subtest",
      "excl $OK",
      "poke testResults",
      "size",
      "flow 0 1 2",
      "done $OK",
      "fail $testResults"
    ],
    "subtest":[
      "poke method ${.value}",
      "hook @fail",
      "call '${.value}'",
      "done",
      "@fail",
      "done '$method failed : $'"
    ]
  },
  "router":{
    "_hidden" : true,
    "_ellipsis":true
  }
}
