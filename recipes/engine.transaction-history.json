{
  "engine": "transaction-history",
  "name": "Transaction history engine",
  "cacheHistoryTime": "60",
  "import": "transaction-data",
  "historyScanPageSize": 12,
  "historyScanPageRange": 2,

  "quartz" : {
    "getHistory": [
      "fail 'Abstract method getHistory not implemented!'",
      "#Expects an address and optional count + offset.",
      "#Returns an Array of tx data or tx ID's. (depending on apiProvidesFullTx)"
    ],
    "reformatTx": [
      "fail 'Abstract method reformatTx not implemented!'",
      "#Expects an object with property 'value', which contains the actual transaction data. Will return the tx in the following format: {'id':'7756785777154630495','timestamp':'1546213988','amount':'0.00002019','symbol':'lsk','fee':'0.1','fee-symbol':'lsk','source':'7851760003822400855L','target':'5920921428156130553L','confirmed':'3818508'}"
    ],

    "checkIsItTimeToCheckForUpdate/address": [
      "poke fileName ${address}-${symbol}-history",
      "seek $fileName 2 1",
      "done true",
      "meta $fileName",
      "tran .mod 2 1",
      "done true",
      "math /1000",
      "poke timestamp",
      "date now",
      "math $-$timestamp>$cacheHistoryTime"
    ],
    "checkMoreItemsRequestedThanAvailableInCache/address/count/offset": [
      "poke fileName ${address}-${symbol}-history",
      "seek $fileName 2 1",
      "done false",
      "load $fileName",
      "jpar",
      "size",
      "math <($offset+$count)"
    ],

    "getHistoryOnlyIDs/address/count=12/offset=0" : [
      "call getHistory/$address/$count/$offset",
      "flow apiProvidesFullTx false 1 2",
      "done",
      "each reformatTx",
      "poke transactions",
      "# if the api returns full transaction data, let's store it",
      "fork saveTransactionsFromFullHistory",
      "peek transactions",
      "tran [].id"
    ],

    "saveTransactionFromFullHistory" : [
      "tran .value",
      "call saveTransactionToCache/${.id}"
    ],

    "saveTransactionsFromFullHistory": [
      "each saveTransactionFromFullHistory"
    ],

    "history/address/count=12/offset=0/checkCache=true": [
      "flow checkCache {true: 1} @retrieveFromChain",
      "call checkMoreItemsRequestedThanAvailableInCache/$address/$count/$offset",
      "poke moreItemsRequestedThanAvailableInCache",
      "flow true @retrieveFromChain 1",
      "call checkIsItTimeToCheckForUpdate/$address",
      "flow true @retrieveFromChain @returnCachedHistory",
      "@retrieveFromChain",
      "hook @failedToRetrieveFallbackToCache",
      "call getCachedTransactionIds/$address/99999999/0",
      "poke cachedTransationIds",
      "call getHistoryOnlyIDs/$address/$count/$offset",
      "poke retrievedTransactionIDs",
      "data {newIDs: $retrievedTransactionIDs, cachedIDs: $cachedTransationIds}",
      "call concatHistoryChunks/$address/$count/$offset",
      "done $retrievedTransactionIDs",
      "@returnCachedHistory",
      "call getCachedTransactionIds/$address/$count/$offset",
      "done",
      "@failedToRetrieveFallbackToCache",
      "flow moreItemsRequestedThanAvailableInCache true 1 @returnCachedHistory",
      "fail"
    ],

    "getCachedTransactionIds/address/count/offset": [
      "poke fileName ${address}-${symbol}-history",
      "seek $fileName 2 1",
      "done []",
      "load $fileName",
      "jpar",
      "take $offset $count"
    ],

    "concatHistoryChunks/address/count/offset": [
      "poke {newIDs:newIDs,cachedIDs:cachedIDs}",
      "peek cachedIDs",
      "void {array:1} @concatenate",
      "@noCache",
      "peek newIDs",
      "call saveHistoryToCache/$address",
      "done",
      "@concatenate",
      "data {newIDs:$newIDs,cachedIDs:$cachedIDs}",
      "call getPreviousChunks/$address/$count/$offset",
      "poke {newIDs:newIDs,cachedIDs:cachedIDs,overlapFound:overlapFound}",
      "flow .overlapFound true @skipNext 1",
      "call getNextChunks/$address/$count/$offset",
      "@skipNext",
      "tran .newIDs",
      "call saveHistoryToCache/$address"
    ],
    "saveHistoryToCache/address":[
      "type array 1 2",
      "save ${address}-${symbol}-history"
    ],
    "getPreviousChunks/address/count/offset": [
      "poke {newIDs:newIDs,cachedIDs:cachedIDs}",
      "poke cnt 0",
      "@countLoop",
      "with prevOffset math $cnt*$historyScanPageSize+$offset+$count",
      "call getHistoryOnlyIDs/$address/$historyScanPageSize/$prevOffset",
      "void {array:@done} 1",
      "with newIDs fuse $",
      "isct $cachedIDs",
      "# if the retrieved ids overlap with cache, we're done",
      "void {array:1} @stitch",
      "loop @countLoop cnt <$historyScanPageRange",
      "@done",
      "done {newIDs:$newIDs,cachedIDs:$cachedIDs, overlapFound:false}",
      "@stitch",
      "data {newIDs:$newIDs,cachedIDs:$cachedIDs,intersection:$}",
      "call stitch"
    ],

    "getNextChunks/address/count/offset": [
      "poke {newIDs:newIDs,cachedIDs:cachedIDs}",
      "poke cnt 0",
      "@countLoop",
      "with nextOffset math ${offset}-$cnt*$historyScanPageSize",
      "true $nextOffset+$historyScanPageSize<=0 @done 1",
      "true $nextOffset<0 1 @positive",
      "with remainingSize math '($nextOffset+$historyScanPageSize)'",
      "with nextOffset math max($nextOffset,0)",
      "call getHistoryOnlyIDs/$address/$remainingSize/$nextOffset",
      "jump @concatenate",
      "@positive",
      "call getHistoryOnlyIDs/$address/$historyScanPageSize/$nextOffset",
      "@concatenate",
      "with newIDs fuse $ 0",
      "isct $cachedIDs",
      "# if the retrieved ids overlap with cache, we're done",
      "void {array:1} @stitch",
      "loop @countLoop cnt <$historyScanPageRange",
      "@done",
      "done {newIDs:$newIDs,cachedIDs:$cachedIDs, overlapFound:false}",
      "@stitch",
      "data {newIDs:$newIDs,cachedIDs:$cachedIDs,intersection:$}",
      "call stitch"
    ],

    "stitch": [
      "# newIDs = 345 , cacheIDs = 567 ,     intersection = 5",
      "# newIDs = 345 , cacheIDs = 123 ,     intersection = 3",
      "# newIDs = 345 , cacheIDs = 4 ,       intersection = 4",
      "# newIDs = 345 , cacheIDs = 1234567 , intersection = 345",
      "# cut the intersection from cacheIDs and splice newIDs into it",
      "poke {newIDs:newIDs,cachedIDs:cachedIDs,intersection:intersection}",
      "with intersectionSize [peek,intersection] [size]",
      "with needle [peek, intersection] [pick]",
      "with index [peek, cachedIDs] [indx, '$needle']",
      "peek cachedIDs",
      "fuse $newIDs $index $intersectionSize",
      "done {newIDs:$,cachedIDs:$cachedIDs, overlapFound:true}"
    ]
  }
}
