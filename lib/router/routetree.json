{
  "_help" : "Welcome to the hybrixd REST API. This Application Programming Interface can be used to retrieve information from hybrixd. The requests are formated as / separated commands. (Similar to a website url or file path.)",
  "a":{"_alias":"asset"},
  "asset": "Defined in recipes/engine.asset.json",
  "c":{"_alias":"command"},
  "command":{
    "_help":"Execute a direct command to hybrixd.",
    "_access":"root",
    "events":"List all running event hooks.",
    "apiqueue" :{
      "_help" : "Commands to control and check the API Queue.",
      "pause":"Pause the API Queue",
      "resume":"Resume the API Queue when it is paused.",
      "status":"Check the status of the API Queue.",
      "test": {
        "start": "Enable test mode using cached values as fallback.",
        "force": "Enable test mode using cached values as default.",
        "stop": "Disable test mode using cached values.",
        "status": "Check the status of the test mode."
      }
    },
    "cache" :{
      "_help" : "Commands to control and check the cache.",
      "clear" : "Clear the cache."
    },
    "conf" :{
      "_help" : "Commands to control and check hybrixd configuration.",
      "get" : {
        "_ref" : {
          "_list" : "key",
          "_this":"Retrieve a configuration value"
        }
      },
      "list" : {
        "_this":"List all configuration details",
        "_ref" : {
          "_list" : "key",
          "_this":"List configuration details"
        }
      },
      "set" : {
        "_ref" : {
          "_list" : "key",
          "_ref" : {
            "_list" : "value",
            "_this":"Set configuration details"
          }
        }
      },
      "conf.js":{
        "_this" : "test",
        "hidden" : true
      },
      "_this" : "Configuration Web UI.",
      "_ui" : "conf"
    },
    "exec" :{
      "_help" : "Execute a Qrtz script.",
      "_ref" : {
          "_ellipsis" : true,
          "_list" : "file",
        "_this" : "Specify the file containing the code to execute."
      }
    },
    "update" : {
      "_this" : "Update hybrixd to latest release version",
      "check" : "Check if update is available"
    },
    "reload" : {
      "_help":"Commands to reload hybrixd or specific components",
      "_this":"Reload hybrixd.",
      "conf":"Reload hybrixd configuration files.",
      "modules":"Reload hybrixd modules.",
      "recipes":"Reload hybrixd recipes."
    },
    "scheduler" :{
      "_help" : "Commands to control and check the Scheduler.",
      "pause":"Pause the Scheduler.",
      "resume":"Resume the Scheduler when it is paused.",
      "status":"Check the status of the Scheduler."
    },
    "endpoint" :{
      "_this" : "List all interface endpoints.",
      "_ref" : {
        "_list" : "protocol",
        "_ref" : {
          "_help" : "Commands to control and check the interface endpoints.",
          "_list" : "endpoint",
          "close":"Close the endpoint.",
          "open":"Resume the listening on the endpoint when it is closed.",
          "status":"Check the status of the endpoint."
        }
      }
    },
    "start" : "Start hybrixd (only available through CLI).",
    "restart" : "Restart hybrixd.",
    "stop" : "Stop hybrixd."
  },
  "e":{"_alias":"engine"},
  "engine":{
    "_help":"Engines are scriptable modules that can be built to do a variety of tasks.",
    "_this":"List available engines."
  },
  "h":{"_alias":"help"},
  "help":{
    "_this":"Display help as html.",
    "_ellipsis":true
  },
  "l":{"_alias":"list"},
  "list":{
    "_help" : "Produce standard property lists of assets, sources or engines.",
    "asset" : {
      "icons":"Retrieve a list of all basic asset icons.",
      "names":"Retrieve a list of all basic asset names.",
      "modes":"Retrieve a list of all basic asset modes.",
      "details":"Retrieve a list of all basic asset details [{symbol,name,mode}]."
    }
  },
  "m":{"_alias":"meta"},
  "meta":{
    "_this":"Provides the api routing tree data"
  },
  "p":{"_alias":"proc"},
  "proc":{
    "_this" : "List all processes.",
    "kill":{
      "_access":"root",
      "_help" : "Kill a process and all child processes.",
      "_ref" : {
        "_list" : "proc",
        "_this" : "Specify the process ID to kill."
      }
    },
    "debug": {
      "_ref" : {
        "_list" : "proc",
        "_this" : "Specify the process ID to debug."
      },
      "debug.js":{
        "_this" : "test",
        "hidden" : true
      },
      "_this" : "Debug Web UI.",
      "_ui" : "proc/debug"
    },
    "code" :{
      "_this" : "Code Web UI.",
      "_ui" : "proc/code",
      "_access":"root",

      "_ref":{
        "_this" :"asset, engine or source",
        "_list" : "id",
        "_ref":{
          "_list" : "id",
          "_this" : "Retrieve qrtz code for given recipe.",
          "_ref":{
            "_list" : "method",
            "_this" : "Retrieve qrtz code for given recipe method."
          }
        }
      },
      "code.js":{
        "_this" : "test",
        "hidden" : true
      }
    },
   "exec":{
     "_ellipsis": true,
     "_this" : "Execute a qrtz statement.",
     "_access":"root"
    },
    "pause":{
      "_this" : "List all paused processes.",
      "_ref" : {
        "_access":"root",
        "_list" : "proc",
        "_this" : "Specify the process ID to pause. All its child processes are also paused."
      }
    },
    "resume":{
      "_help" : "Resume a paused process and all child processes.",
      "_ref" : {
        "_access":"root",
        "_list" : "paused_proc",
        "_this" : "Specify the process ID to resume."
      }
    },
    "peek":{
      "_access" : "root",
      "_help" : "Display the internal data of a process.",
      "_ref" : {
        "_list" : "proc",
        "_this" : "Specify the process ID to get its internal data."
      }
    },
    "queue":{
      "_access":"owner",
      "_this" : "Display queued processes.",
      "_ref" : {
        "_list" : "proc",
        "_this" : "Specify the process ID to get its queue status."
      }
    },
    "busy":{
      "_access":"owner",
      "_this" : "Display busy processes."
    },
    "finished":{
      "_access":"owner",
      "_this" : "Display finished processes."
    },
    "_ref" : {
      "_list" : "proc",
      "_this" : "Specify a process ID to see its details."
    }
  },
  "r":{"_alias":"report"},
  "report":{
    "_this" : "Report utility UI",
    "_ui" : "report",
    "cron":{
      "_this":"Update the weekly public statistics.",
      "_access" : "root"
    },
    "report.js":{
      "_this" : "test",
      "hidden" : true
    },
    "report.css":{
      "_this" : "test",
      "hidden" : true
    },
    "assets" : {
      "_ui" : "report/assets",
      "_this" : "View the asset test report. Requires test data to be available. Run /report/assets/test to gather data or ensure enable_daily_asset_report is set to true.",
      "cron" : {
        "_this":"Run tests and return json report ",
        "_access" : "root"
      },
      "test" : {
        "_this":"Run tests and return xml report ",
        "_access" : "root"
      },
      "cli" : {
        "_this":"Return test results in cli format.",
        "_access" : "root"
      },
      "html" : {
        "_this":"Return test results in HTML format."
      },
      "xml" : "Return test results in xml format.",
      "json" : {
        "_this": "Return test results in json format."
      }
    },
    "asset":{
      "_ref":{
        "_list" : "symbol",
        "_sample" : "dummy",
        "_this" : "Return test results for $SYMBOL as html.",
        "json" :  "Return test results for $SYMBOL for json.",
        "cli" : {
          "_this":"Run and return test results for $SYMBOL.",
          "_access" : "root"
        }
      }
    },
    "log" :{
      "_ui" : "report/log",
      "_access" : "root",
      "_this" : "Return log entries for the last hour.",
      "_ref":{
        "_list" : "categories",
        "_sample" : "error|fatal",
        "_this" : "Return log entries for given categories for last hour. Use * wildcard for all categories.",
        "_ref":{
          "_list" : "start",
          "_sample" : "1d",
          "_this" : "Return log entries for given categories from $START till now.",
          "_ref":{
            "_list" : "end",
            "_sample" : "2d",
            "_this" : "Return log entries for given categories from $START till $END.",
            "_ref":{
              "_list" : "search",
              "_sample" : "keyword",
              "_this" : "Return log entries for given categories from $START till $END with message containing $SEARCH."
            }
          }
        }
      }
    },
    "sessions" :{
      "_ui" : "report/sessions",
      "_this" : "View report HTML.",
      "json"  :  "Return session statistics for the last week.",
      "_ref":{
        "_access" : "root",
        "_list" : "start",
        "_sample" : "1d",
        "_this" : "Return session timestamps from $START till now.",
        "_ref":{
          "_list" : "end",
          "_sample" : "2d",
          "_this" : "Return session timestamps from $START till $END."
        }
      }
    },
    "api" :{
      "_ui" : "report/api",
      "assets": {
        "_this" : "View report HTML.",
        "json"  :  "Return asset api statistics for the last week.",
        "_ref":{
          "_access" : "root",
          "_list" : "start",
          "_sample" : "1d",
          "_this" : "Return asset api call timestamps and symbols from $START till now.",
          "_ref":{
            "_list" : "end",
            "_sample" : "2d",
            "_this" : "Return asset api call timestamps and symbols $START till $END.",
            "_ref":{
              "_list" : "search",
              "_sample" : "keyword",
              "_this" : "Return asset api call timestamps and symbols containing $SEARCH."
            }
          }
        }
      },
      "_this" :"View report HTML.",
      "json" : "Return api call statistics for the last week.",
      "_ref":{
        "_access" : "root",
        "_list" : "start",
        "_sample" : "1d",
        "_this" : "Return api call timestamps from $START till now.",
        "_ref":{
          "_list" : "end",
          "_sample" : "2d",
          "_this" : "Return api call timestamps $START till $END.",
          "_ref":{
            "_list" : "search",
            "_sample" : "keyword",
            "_this" : "Return api call timestamps containing $SEARCH."
          }
        }
      }
    }
  },
  "s":{"_alias":"source"},
  "source":{
    "_help":"Sources are read-only information providers.",
    "_this":"List available sources."
  },
  "v":{"_alias":"version"},
  "version":{
    "_this": "Get version.",
    "_help" : "Display version information.",
    "details" : "Get version details."
  },
  "w":{"_alias":"wchan"},
  "wchan":{
    "_hidden":true,
    "hash" : {
      "_this" : "Retrieve the hash for a flat file result.",
      "_ellipsis": true
    },
    "_help" : "Wchan can be used to retrieve parts of a file result.",
    "_ref":{
      "_this" : "Retrieve file from given offset.",
      "_ellipsis": true,
      "_list":"offset",
      "_ref":{
        "_this" : "Retrieve file from given offset with given length.",
        "_ellipsis": true,
        "_list":"length",
        "_ref":{
          "_this" : "",
          "_list":"path",
          "_ellipsis": true
        }
      }
    }
  },
  "x":{"_alias":"xauth"},
  "xauth":{
    "_help" : "Create an authenticated session channel for a encrypted communications.",
    "_ref":{
      "_help" : "The 64 char session hex key is given as as a public key.",
      "_list":"session_hexkey",
      "0" : {
        "_this":"Step 0 consists of requesting `$NONCE1` . Note that resending the request will erase the session.",
        "_response" : "{error:0, nonce1:$NONCE1}"
      },
      "1" : {
        "_help": "Step 1 consists of sending the signed `$NONCE1` , if this is verified the session public key is given.",
        "_ref" : {
          "_list": "crypt_hex",
          "_this": "Make sure to include the hexadecimal signature.",
          "_response" : "{error:0,server_sign_pubkey:$SERVER_SIGN_PUBKEY,server_session_pubkey:$SERVER_SESSION_PUBKEY,current_nonce:$NONCE_CONHEX,crhex:$CRYPT_HEX}"
        }
      }
    }
  },
  "y":{"_alias":"ychan"},
  "ychan":{
    "_help" : "Send an encrypted request through the session channel and recieve an encrypted response.",
    "_ref":{
      "_help" : "The 64 char session hex key is given as a public key.",
      "_list":"session_hexkey",
      "_ref" : {
        "_list":"nonce",
        "_ref" : {
          "_list":"encrypted_path",
          "_this" : " `$ENCRYPTED_PATH` , for example: `/asset/btc/details` encrypted using the `$SESSION_PUBLIC_KEY` is executed as an API command and the result is encrypted and returned."
        }
      }
    }
  },
  "z":{"_alias":"zchan"},
  "zchan":{
    "_help" : "Send an encrypted request through the session channel and recieve an encrypted and compressed response.",
    "_ref":{
      "_list":"session_hexkey",
      "_help" : "The 64 char session hex key is given as a public key.",
      "_ref" : {
        "_list":"nonce",
        "_ref" : {
          "_list":"encrypted_path",
          "_this" : " `$ENCRYPTED_PATH` , for example: `/asset/btc/details` encrypted using the `$SESSION_PUBLIC_KEY` is executed as an API command and the result is encrypted and compressed using lmza and returned."
        }
      }
    }
  }
}
