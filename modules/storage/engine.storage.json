{
  "engine":"storage",
  "name":"Storage engine module",
  "module":"storage",
  "cron" : 300,
  "conf" : {
      "maxstoragesize" : {
        "default" : 2000000000,
        "type" : "int",
        "unit" : "bytes"
      },
      "minstoragetime" : {
        "default" : 30,
        "type" : "int",
        "unit" : "days"
      },
      "maxstoragetime" : {
        "default" : 365,
        "type" : "int",
        "unit" : "days"
      }    
  },
  "quartz"  : {
    "load/key":[
      "data {key:'$key'}",
      "func load",
      "mime file:data",
      "file",
      "done"
    ],
    "save/key/value":[
      "test @dataPost @dataGet",
      "@dataPost",
      "data {key:'$key',value:'$'}",
      "jump 2",
      "@dataGet",
      "data {key:'$key',value:'$value'}",
      "func save",
      "poke work",
      "rout /e/synchronize/sync-item/$key 2 1",
      "warn 'Sync failed for $key'",
      "peek work"
    ],
    "get/key" : [
      "#TODO depriciated",
      "call load/$key"
    ],
    "set/key/value" : [
      "#TODO depriciated",
      "call save/$key/$value"
    ],

    "work/key/proof": ["func work/$key/$proof"],
    "size": ["func size"],
    "seek/key": ["func seek/$key"],
    "burn/key": ["func burn/$key"],
    "meta/key": ["func meta/$key"],
    "list/pattern": ["func list/$pattern"]
  },
  "router" : {
    "_help" : "Control the decentralized storage engine.",
    "size":{
      "_access" : "root",
      "_this" : "Return total size of local storage."
    },
    "seek":{
      "_help" : "Check if a storage key exists.",
      "_ref" : {
        "_list" : "storage_id",
        "_this" : "Specify the ID key to check if it exists."
      }
    },
    "load":{
      "_help" : "Load data from storage.",
      "_ref" : {
        "_list" : "storage_id",
        "_this" : "Specify the ID key to get storage from."
      }
    },
    "save":{
      "_help" : "Save data to storage.",
      "_ref" : {
        "_list" : "storage_id",
        "_help" : "Specify the ID key to save storage to.",
        "_ref" : {
          "_list" : "data",
          "_this" : "Specify the data string value to be saved."
        }
      }
    },
    "get":{
      "_hidden":true,
      "_help" : "Load data from storage.",
      "_ref" : {
        "_list" : "storage_id",
        "_this" : "Specify the ID key to get storage from."
      }
    },
    "set":{
      "_hidden":true,
      "_help" : "Save data to storage.",
      "_ref" : {
        "_list" : "storage_id",
        "_this" : "Specify the ID key to save storage to.",
        "_ref" : {
          "_list" : "data",
          "_this" : "Specify the data string value to be saved."
        }
      }
    },

    "burn":{
      "_access" : "root",
      "_help" : "Delete data from storage.",
      "_ref" : {
        "_list" : "storage_id",
        "_this" : "Specify the ID key to delete the storage object."
      }
    },
    "list":{
      "_help" : "List keys by identifiable string.",
      "_ref" : {
        "_list" : "storage_id",
        "_this" : "Specify part or all of the ID key to include on the list. Wildcards (*,?) are allowed."
      }
    },
    "work":{
      "_help" : "Provide proof-of-work for long term storage.",
      "_ref" : {
        "_list" : "key",
        "_help" : "Specify the ID key to provide proof for.",
        "_ref" : {
          "_list" : "proof",
          "_this" : "Specify a proof string that solves the puzzle."
        }
      }
    },
    "pow":{"_alias":"work"},
    "meta":{
      "_help" : "Get metadata about a storage object.",
      "_ref" : {
        "_list" : "storage_id",
        "_this" : "Specify the ID key to get metadata for."
      }
    },
    "list":{
      "_access":"root",
      "_help" : "Get list of matching storage ids.",
      "_ref" : {
        "_list" : "pattern",
        "_this" : "Specify the pattern to seek matching storage ids."
      }
    }
  }
}
