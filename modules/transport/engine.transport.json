{
  "engine":"transport",
  "name":"Transport engine module",
  "module":"transport",
  "curlTimeout":8000,
  "readTimeout":120000,
  "sendTimeout":120000,
  "announceMaxBufferSize":10000,
  "useHttpCalls":true,
  "hashSalt":"Th1s1sS0m3S4lty3ntr0pyf0rTh0s3H4sh1ngFunct10ns!",
  "defaultChannel":"hybrixAnnouncements",
  "defaultIrcHost":"irc.freenode.net",
  "defaultTorrentPasswd":"l3ts_b34t_th3_b4nks!",  
  "quartz" : {
    "init" :[
      "# open transports IRC and Torrent, unless already open",
      "func open/torrent"
    ],
    "open" :[
      "prog 0 1 8000",
      "func open/$1/$2/$3"
    ],
    "stop" :[
      "prog 0 1 8000",
      "func stop/$1"
    ],
    "info" :[
      "func info/$1"
    ],
    "read" :[
      "time $readTimeout",
      "func read/$1/$2/$3",
      "done"
    ],
    "send" :[
      "time $sendTimeout",
      "data $@",
      "join '/'",
      "func $",
      "done"
    ],
    "list" :[
      "data $@",
      "join '/'",
      "func $"
    ],
    "node" : [
      "node",
      "done"
    ],
    "path" : [
      "time $readTimeout",
      "# create path out of arguments",
      "data $@",
      "pull",
      "poke path",
      "pull",
      "join '/'",
      "poke curlpath",
      "data '$useHttpCalls'",
      "flow 'false' @transportCall",
      "# try direct calls",
      "call 'list/endpoints/$1/http'",
      "poke httpEndpoints",
      "size",
      "void 'zero' @transportCall",
      "peek httpEndpoints",
      "shuf",
      "logs 'module transport: direct call ${[0]}/$curlpath ...'",
      "curl '${[0]}' '/$curlpath' GET {retry:1,timeout:$curlTimeout} 1 @transportCall",
      "done",
      "@transportCall",
      "# get the node's public key/ID",
      "with 'nodeId' node",
      "peek path",
      "push '$nodeId' 1",
      "join '/'",
      "logs 'module transport: decentralized call @/$curlpath ...'",
      "call 'send/*/$'",
      "call 'read/*/$nodeId/$'",
      "done"
    ],
    "rout" : [
      "# complete resolving query",
      "data $@",
      "pull",
      "poke path",
      "pick",
      "poke nodeId",
      "with path [join,'/']",
      "time $readTimeout",
      "call 'path/$path'",
      "poke result",
      "tran '.id' 1 @return",
      "flow 'id' 1 @return",
      "peek result",
      "tran '.data' 1 @return",
      "call 'path/$nodeId/p/$'",
      "poke result",
      "@return",
      "peek result",
      "true '${.error}>0' 1 2",
      "fail ${.error} ${.data}",
      "tran '.data'",
      "done"
    ]
  },
  "router" : {
    "_help" : "Control the announcement engine.",
    "node" : "The public Node id",
    "open":{
      "_help" : "Connect to a transport network. When initialized the transport returns a handle.",
      "_access" : "root",
      "_this" : "When entering no other information, the possible protocols are listed.",
      "_ref" : {
        "_list" : "protocol",
        "_sample":"irc",
        "_this" : "Protocol to use. (irc or bittorrent)",
        "_ref" : {
          "_list" : "target",
          "_this" : "Target group or host to connect to.",
          "_ref" : {
            "_list" : "channel",
            "_this" : "Channel or network name specifier."
          }
        }
      }
    },
    "stop":{
      "_help" : "Close an active transport.",
      "_access" : "root",
      "_ellipsis" : true,
      "_this" : "Close all transports, or alternatively close one by specifying the handle of the transport to close."
    },
    "info":{
      "_help" : "Get information about an active transport.",
      "_ref" : {
        "_list" : "handle",
        "_this" : "Specify the handle of the transport to query."
      }
    },
    "send":{
      "_help" : "Send a message over an active transport.",
      "_hidden" : true,
      "_ref" : {
        "_list" : "handle",
        "_ref" : {
          "_list" : "target_node_Id",
          "_ref" : {
            "_ellipsis" : true,
            "_list" : "message",
            "_this" : "Message to send must be a string. A message ID is returned."
          }
        }
      }
    },
    "read":{
      "_help" : "Read a message from an active transport, expecting the data from a certain source.",
      "_hidden" : true,
      "_ref" : {
        "_list" : "handle",
        "_ref" : {
          "_list" : "source_node_Id",
          "_ref" : {
            "_list" : "message_Id",
            "_this" : "Specify the message ID to which the remote node is responding."
          }
        }
      }
    },
    "path":{
      "_help" : "Query an API path on a target node over any active transports.",
      "_hidden" : true,
      "_ref" : {
        "_list" : "target_node_Id",
        "_ellipsis" : true,
        "_this" : "Make sure to specify the node ID. The API call must be a path."
      }
    },
    "rout":{
      "_help" : "Route a call on a target node over any active transports.",
      "_hidden" : true,
      "_ref" : {
        "_list" : "target_node_Id",
        "_ellipsis" : true,
        "_this" : "Make sure to specify the node ID. The API call must be a path."
      }
    },
    "list":{
      "_help" : "List active transports, endpoints or peers.",
      "endpoints" : {
        "_this" : "List endpoints belonging to you or other nodeIds.",
        "_ref" : {
          "_list" : "target_node_Id",
          "_this" : "Optionally specify a nodeId target.",
          "_ref" : {
            "_list" : "filter",
            "_this" : "Filter by protocol(s). (For example: 'http,https')"
          }
        }
      },
      "handles" : "Active transport handles are listed.",
      "nodes" : "Nodes across all networks are listed. You can specify the handle to see only the nodes that belong to it.",
      "peers" : "Peers across all networks are listed, categorized by handles. You can specify the handle to see only the peers that belong to it."
    }
  }
}
