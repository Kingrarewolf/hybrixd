{
  "engine" : "deal",
  "name" : "Create a deal between provider (node) and client",
  "cache" : 15000,
  "timeout" : 120000,
  "proposalListPrefix" : "bf70896b41c1555612fb332d274d4e4b",
  "cron" : 10,
  "permissions":{
    "nodeKeys":true
  },
  "expose" : {
    "allocation" : ["readHistory"]
  },
  "quartz" : {
    "cron" : [
      "call proposalHandler",
      "void 2 1",
      "logs"
    ],
    "estimate/fromBase/toSymbol/amount" : [
      "call proposalCreate/$fromBase/$toSymbol/$amount"
    ],
    "proposal/fromBase/toSymbol/amount/target" : [
      "call proposalCreate/$fromBase/$toSymbol/$amount/$target"
    ],
    "proposalHandler" : [
      "call selectFromProposalList",
      "void @notexist",
      "poke proposalKey",
      "load $proposalKey 1 @removeFromQueue",
      "decr 1 @removeFromQueue",
      "jpar 1 @removeFromQueue",
      "have .accountID 1 @removeFromQueue",
      "poke accountID ${.accountID}",
      "call dealStatus",
      "poke proposalID ${.id}",
      "# check if end-user has sent their transaction, and it is confirmed",
      "with txTimeout [data,${.status}] [flow,'timeout',1,2] [done,1] [done,0]",
      "with txRejected [data,${.status}] [flow,'rejected',1,2] [done,1] [done,0]",
      "with txDone [data,${.status}] [flow,'done',2,1] [done,0] [true,'${.progress}==1',1,-1] [done,1]",
      "test txDone @removeFromQueue",
      "with typeAuto [data,${.type}] [flow,'autonomous',1,2] [done,1] [done,0]",
      "test typeAuto 1 @defer",
      "with txConfirmed [data,${.bid.txid}] [void,2,1] [done,0] [data,${.status}] [flow,'accepted',2,1] [done,0] [true,'${.progress}==0.5',1,-1] [done,1]",
      "test txConfirmed 1 @defer",
      "data [$accountID,${.bid.symbol},${.bid.amount},${.bid.target}]",
      "jstr",
      "encr",
      "hook @defer",
      "call 'allocation::push'",
      "call remitted/$proposalID/$",
      "done",
      "@defer",
      "test txTimeout @removeFromQueueWithRebalance",
      "test txRejected @removeFromQueueWithRebalance",
      "done 'proposal $proposalID with status ${.status} is pending...'",
      "@removeFromQueueWithRebalance",
      "with rebalanceValue [math,'${.bid.amount} + ${.fees.network}']",
      "fork rebalanceCall/${allocation.accountID}/${.bid.symbol}/$rebalanceValue",
      "@removeFromQueue",
      "call deleteFromProposalList/$proposalKey",
      "with itemSpec [data,'$proposalID'] [flow,{'undefined':1},2] [done,'storage key $proposalKey'] [done,'proposal $proposalID']",
      "done '$itemSpec removed from queue'",
      "@notexist",
      "done null"
    ],
    "proposalCreate/fromBase/toSymbol/amount/target=null" : [
      "# 1. find best allocator available for this proposal",
      "poke reference $amount",
      "flow target null 1 @hasTarget   # if estimating, take a fractional amount",
      "ship amount 2 1 1 1",
      "poke amount 1",
      "with toUnit rout /e/valuations/rate/usdt/$toSymbol/1",
      "poke amount $toUnit",
      "@hasTarget",
      "rout /e/allocation/pair/select/$fromBase/$toSymbol/$amount",
      "have .accountID 2 1",
      "fail 'Proposal cannot continue: No allocator accepts this proposal!'",
      "poke allocation",
      "with allocation.fee [excl,'%']",
      "# 2. gather some extra variables",
      "with timestamp [date,now] [math,'round']",
      "# 3. get conversion rate",
      "rout /e/valuations/rate/$toSymbol/$fromBase/1 2 1",
      "fail 'Proposal cannot continue: Cannot calculate conversion rate!'",
      "poke rate",
      "# 4. calculate conversion",
      "call calcNetworkFeesBaseDenominated/$fromBase/$toSymbol",
      "void 1 2",
      "fail 'Proposal cannot continue: Cannot get network fee data!'",
      "poke networkFee",
      "with allocatorFee [math,'$amount * $rate * (${allocation.fee} / 100)']",
      "with feesTotal math '$allocatorFee + $networkFee/($reference/$amount)'",
      "with baseAmount [math,'$amount * $rate']",
      "with baseAmountPlusFee [math,'$baseAmount + $feesTotal']",
      "# ! include maximum tradable amounts",
      "with maxBidSufficiency [rout,/e/allocation/pair/stats/$fromBase/$toSymbol,2,1] [done,0] [tran,.sufficiency,1,-1] [math,'*$rate']",
      "with maxAskSufficiency [math,'$maxBidSufficiency/$rate'] [form,$fromBase]",
      "# !  skip reserving amount and defining creation, deadline and recipient values if only estimating",
      "flow target null @estimateProposal",
      "# Validate target address",
      "rout /a/$toSymbol/validate/$target 2 1",
      "fail 'Could not validate target address'",
      "flow valid 2 1",
      "fail 'Target $target is not a valid $toSymbol address.'",
      "with creation [date,now] [math,round]",
      "with deadline math '$creation+${allocation.deadline}' round",
      "# 5. return target to accept payment, reserve needed amount, and adjust feelevel",
      "with recipient call allocation::getAddressAccount/${allocation.accountID}/$fromBase",
      "fork rebalanceCall/${allocation.accountID}/$toSymbol/-$amount",
      "# 6. define proposal/estimate contents",
      "@estimateProposal",
      "poke proposalData { ask: {symbol:'$fromBase',amount:'$baseAmountPlusFee',sufficiency:'$maxAskSufficiency'}, bid: {symbol:'$toSymbol',amount:'$amount',sufficiency:'$maxBidSufficiency'}, fees: {symbol:'$fromBase',allocator:'$allocatorFee',network:'$networkFee'} }",
      "flow target null 1 @saveProposal",
      "with proposalData.ask.amount [math,'*($reference/$toUnit)'] [form,$fromBase]",
      "with proposalData.bid.amount [math,'*$reference/$toUnit'] [form,$toSymbol]",
      "with proposalData.fees.allocator [math,'*$reference/$toUnit'] [form,$fromBase]",
      "done $proposalData",
      "# 7. finalize, save and return proposal object",
      "@saveProposal",
      "with proposalData.ask.amount form $fromBase",
      "with proposalData.bid.amount form $toSymbol",
      "with proposalData.fees.allocator form $fromBase",
      "poke proposalData.ask.target '$recipient'",
      "poke proposalData.ask.txid null",
      "poke proposalData.bid.target '$target'",
      "poke proposalData.bid.txid null",
      "poke proposalData.type '${allocation.type}'",
      "with proposalIDa [data,'deal ${allocation.accountID} $fromBase $baseAmountPlusFee $recipient'] [hash,djb2] [case,lower]",
      "with proposalIDb [data,'deal ${allocation.accountID} $toSymbol $amount $target $deadline'] [hash,djb2] [case,lower]",
      "poke proposal { id: '${proposalIDa}${proposalIDb}', ask: ${proposalData.ask}, bid: ${proposalData.bid}, fees: ${proposalData.fees}, type: ${proposalData.type}, creation:$creation, deadline:$deadline }",
      "data { accountID: '${allocation.accountID}', timestamp: '$timestamp', deal: $proposal }",
      "jstr",
      "encr",
      "with keyHash [data,'deal ${allocation.accountID}'] [hash] [take,-16] [push,'$proposalIDb',0] [push,'$proposalIDa',0]",
      "save $keyHash",
      "call addToProposalList/$keyHash",
      "done $proposal"
		],
    "addToProposalList/key" : [
      "peek local::proposalList []",
      "push $key",
      "uniq",
      "poke local::proposalList"
    ],
    "selectFromProposalList" : [
      "with listSize [peek,local::proposalList,[]] [size]",
      "true '$listSize==0' @finished",
      "with listCount [peek,local::proposalCount,0]",
      "true '$listCount<$listSize' 2 1",
      "poke listCount 0",
      "peek local::proposalList",
      "pick $listCount",
      "with listCount [math,'+1'] [poke,local::proposalCount]",
      "@finished"
    ],
    "deleteFromProposalList/key" : [
      "peek local::proposalList []",
      "excl $key",
      "uniq",
      "poke local::proposalList",
      "# add to the completed deals list",
      "call addToCompleteList/$key"
    ],
    "addToCompleteList/key" : [
      "peek local::completeList []",
      "push $key 0",
      "uniq",
      "poke local::completeList"
    ],
    "deleteFromCompleteList/key" : [
      "peek local::completeList []",
      "excl $key",
      "uniq",
      "poke local::completeList"
    ],
    "calcNetworkFeesBaseDenominated/source/target" : [
      "rout /a/$target/details",
      "poke targetFee ${.fee}",
			"with targetFeeSymbol [data,${.fee-symbol}] [splt,'.'] [pick,-1]",
			"with denominatedFeeSymbol [data,$source] [splt,'.'] [pick,-1]",
      "# recalculate target network fee into source network denomination",
      "rout /e/valuations/rate/$targetFeeSymbol/$denominatedFeeSymbol/$targetFee 2 1",
      "done null"
    ],
    "getProposal/proposalID" : [
      "list $proposalID*",
      "pick",
      "poke key",
      "test 1 @failure",
      "load 1 @failure",
      "decr 1 @failure",
      "jpar 1 @failure",
      "poke .key $key",
      "done",
      "@failure",
      "done null"
    ],
		"claim/proposalID/transactionID" : [
      "data '$transactionID'",
      "regx '^[a-zA-Z0-9]+$$' 2 1",
      "fail 'Transaction ID must be in alphanumeric format!'",
      "peek local::claimList []",
      "find $transactionID @submitted",
      "with listSize [data,$] [size]",
      "true '$listSize<250' 2",
      "take -1",
      "push $transactionID 0",
      "uniq",
      "poke local::claimList",
      "call getProposal/$proposalID",
      "void @notExist",
      "test .deal.ask.txid @submitted",
      "poke .deal.ask.txid $transactionID",
      "poke keyHash ${.key}",
      "drop key",
      "jstr",
      "encr",
      "save $keyHash",
      "done 'Claim for $proposalID submitted.'",
      "@submitted",
      "fail 'Claim for $proposalID already submitted!'",
      "@notExist",
      "fail 'Proposal $proposalID does not exist!'"
    ],
		"remitted/proposalID/transactionID" : [
      "call getProposal/$proposalID",
      "void @notExist",
      "poke askAmount ${.deal.ask.amount}",
      "poke bidAmount ${.deal.ask.amount}",
      "test .deal.bid.txid @submitted",
      "poke .deal.bid.txid $transactionID",
      "poke keyHash ${.key}",
      "drop key",
      "jstr",
      "encr",
      "save $keyHash",
      "fork rebalanceCall/${allocation.accountID}/$fromBase/$askAmount",
      "fork rebalanceCall/${allocation.accountID}/$toSymbol/$bidAmount",
      "@submitted",
      "done 'pushed remittance transaction for $proposalID'",
      "@notExist",
      "fail 'Proposal $proposalID does not exist!'"
    ],
    "rebalanceCall/allocationID/symbol/amount" : [
      "call allocation::doRebalancePair/$allocationID/$symbol/$amount"
    ],
    "dealStatus": [
      "tran .deal 1 @failure",
      "poke dealID ${.id}",
      "test .ask.txid 1 @zeroAskProgress",
      "with askTx [rout,/a/${.ask.symbol}/transaction/${.ask.txid},2,1] [done,null]",
      "test askTx.timestamp 1 @failure",
      "# is our transaction target equal to the claimed target?",
      "with targetEqual [data,${askTx.target}] [flow,${.ask.target},1,2] [done,1] [done,0]",
      "# is the transaction timestamp set before the proposal creation time?",
      "with txPremature [ship,askTx.timestamp,1,3,3,3] [true,'${askTx.timestamp}<${.creation}',1,2] [done,1] [done,0]",
      "# reject the transaction if either premature or non-equal target",
      "with txRejected [true,'$txPremature',1,2] [done,1] [true,'$targetEqual and ${askTx.amount}==${.ask.amount}',1,-1] [done,0]",
      "true '$txRejected' @zeroAskProgress",
      "# true check transaction deadline",
      "with askConfirmsMax rout /a/${.ask.symbol}/confirmed",
      "with askConfirmsNow [rout,/a/${.ask.symbol}/confirmed/${.ask.txid},2,1] [done,0]",
      "with askProgress math 'max($askConfirmsNow / $askConfirmsMax, 1)'",
      "jump @calcBidProgress",
      "@zeroAskProgress",
      "poke askProgress 0",
      "@calcBidProgress",
      "test .bid.txid 3",
      "poke bidProgress 0",
      "jump @finalize",
      "with bidConfirmsMax rout /a/${.bid.symbol}/confirmed",
      "with bidConfirmsNow [rout,/a/${.bid.symbol}/confirmed/${.bid.txid},2,1] [done,0]",
      "with bidProgress math 'max(($bidConfirmsNow / $bidConfirmsMax) + 0.05, 1)'",
      "@finalize",
      "with progress call calculateAndSaveProgress/$dealID/$askProgress/$bidProgress",
      "# without proper blockchain-based timestamp keep the deal pending",
      "with progress [have,askTx.timestamp,1,3] [ship,askTx.timestamp,2,1,1,1] [math,'-0.025'] [true,<0,1,2] [done,0]",
      "poke .progress $progress",
      "with timenow date now",
      "with status [true,'$txRejected',1,2] [done,'rejected'] [true,'$progress>=1',1,2] [done,'done'] [true,'$progress<0.5 and ${.deadline}<$timenow',1,2] [done,'timeout'] [true,'$progress>0 and $progress<0.5',1,2] [done,'confirming'] [true,'$progress==0.5',1,2] [done,'accepted'] [true,'$progress>=0.5 and $progress<1',1,2] [done,'remitting'] [done,'open']",
      "poke .status $status",
      "done",
      "@failure",
      "done null"
    ],
    "calculateAndSaveProgress/dealID/askProgress/bidProgress" : [
      "have local::progress[$dealID] 1 @skipcompare",
      "with savedProgress peek local::progress[$dealID]",
      "with askProgress math 'min( (round( max($askProgress,${savedProgress.ask})*10000 ) / 10000) ,1)'",
      "with bidProgress math 'min( (round( max($bidProgress,${savedProgress.bid})*10000 ) / 10000) ,1)'",
      "@skipcompare",
      "poke local::progress[$dealID] {ask:$askProgress,bid:$bidProgress}",
      "math 'round(($askProgress + $bidProgress) / 0.0002) / 10000'"
    ],
    "status/proposalID" : [
      "call getProposal/$proposalID",
      "void @failure",
      "call dealStatus",
      "void @failure",
      "done",
      "@failure",
      "fail 'Cannot read proposal data of $proposalID!'"
    ],
    "readHistory/timeOffset/timeLimit" : [
      "with timeUntil [date,now] [math,'-$timeOffset']",
      "with timeFrom [math,'$timeUntil - $timeLimit']",
      "peek local::completeList []",
      "each readHistoryObject/$timeFrom/$timeUntil",
      "# debug: add some bogus data",
      "# push null",
      "# push {'accountID': 'TESTpwK8wbN378A5sFrjD5kGEKjF7E954s2iUBiLBiDD','timestamp': '1610306857','deal': {'id': '451beef07d2d526e','ask': {'symbol': 'tomo.hy','amount': '15.229674706936153000','target': '0x47443e223afd74619e49cb619e63a66440bd32d0','txid': '0xf71eea46ececbe36631aff04485ec542e7081273b6d00372141f77e4e304bcd1'},'bid': {'symbol': 'eth.hy','amount': '3.335','target': '0x85fbc94b0b641425392e677cb29cda4314fd7839','txid': '0x1fe0492c532de9117a7cf9aa6fa6251434db741607316246871ce0044d890e95'},'fees': {'symbol': 'tomo.hy','allocator': '0.010005000000000000','network': '11.884669706936153'},'type': 'autonomous','creation': '1610106859','deadline': '1610110459'}}",
      "excl null"
    ],
    "readHistoryObject/timeFrom/timeUntil" : [
      "load ${.value} 2",
      "done null",
      "decr",
      "jpar",
      "true '${.timestamp}>=$timeUntil or ${.timestamp}<$timeFrom' -3"
    ]
  },
  "router" : {
    "_help" : "Deal engine for deals between node and clients.",
    "estimate" : {
      "_help" : "Estimate a deal.",
      "_ref" : {
        "_list" : "base",
        "_help" : "Specify the base symbol to offer in trade.",
        "_ref" : {
          "_help" : "Specify the desired symbol to receive units in.",
          "_list" : "symbol",
          "_this" : "symbol",
          "_ref" : {
            "_help" : "Specify the amount of base symbol to trade.",
            "_list" : "amount",
            "_this" : "amount"
          }
        }
      }
    },
    "proposal" : {
      "_help" : "Propose a deal to trade on.",
      "_ref" : {
        "_list" : "base",
        "_help" : "Specify the base symbol to offer in trade.",
        "_ref" : {
          "_help" : "Specify the desired symbol to receive units in.",
          "_list" : "symbol",
          "_ref" : {
            "_help" : "Specify the amount of base symbol to trade.",
            "_list" : "amount",
            "_ref" : {
              "_help" : "The target address at which to receive the incoming amount.",
              "_list" : "target",
              "_this" : "target"
            }
          }
        }
      }
    },
    "claim" : {
      "_help" : "Claim payment proof for proposal ID. Necessary for a swap to complete, and adds security to the swap.",
      "_ref" : {
        "_list" : "proposalID",
        "_help" : "Specify the proposal ID to call the claim for.",
        "_ref" : {
          "_list" : "transactionID",
          "_this" : "The transaction ID which shall contain the proof."
        }
      }
    },
    "status" : {
      "_help" : "Check the status of a proposal.",
      "_ref" : {
        "_list" : "proposalID",
        "_this" : "Specify the proposal ID to check the status of."
      }
    },
    "proposalHandler" : {
      "_help" : "Fire up the proposal handler.",
      "_this" : "Fire up the proposal handler.",
      "_ref" : {
        "_list" : "proposalID",
        "_this" : "Specify the proposal ID to check the status of."
      }
    }
  }
}
